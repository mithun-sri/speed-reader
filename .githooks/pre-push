#!/bin/bash

# ANSI color codes
BRIGHT_BLUE='\033[1;34m'
RED='\033[1;31m'
YELLOW='\033[0;33m'
GREEN='\033[1;32m'
NO_COLOR='\033[0m'

function print_info() {
    printf "\n$BRIGHT_BLUE%s$NO_COLOR\n" "$1"
}

function print_error() {
    printf "\n$RED%s$NO_COLOR\n" "$1"
}

function print_warning() {
    printf "\n$YELLOW%s$NO_COLOR\n" "$1"
}

function print_success() {
    printf "\n$GREEN%s$NO_COLOR\n" "$1"
}

# Skip checks if deleting a remote branch.
STDIN=$(cat -)
if [[ "$STDIN" =~ ^\(delete\) ]]; then
    print_info "Delete remote branch detected. Skipping checks..."
    exit 0
fi

print_info "[0/10] Starting Docker containers..."
if ! docker compose up -d; then
    print_error "Failed to start Docker containers. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose logs -f' to check the logs."
    exit 1
else
    print_success "Docker containers started successfully!"
fi

# Check if the OpenAPI spec has changed.
print_info "[1/10] Checking for OpenAPI spec changes..."
if ! docker compose exec -T frontend yarn generate; then
    print_error "Failed to re-generate the API client. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it frontend yarn generate' to try again."
    exit 1
else
    print_success "API client re-generated successfully!"
fi
if git status | grep -q "api/api.ts"; then
    print_error "OpenAPI spec has changed. Please commit the re-generated API client before pushing."
    exit 1
else
    print_success "No uncommitted API client changes detected!"
fi

print_info "[2/10] Running frontend type checks..."
if ! docker compose exec -T frontend yarn tsc --noEmit; then
    print_error "Frontend type checks failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it frontend yarn tsc --noEmit' to try again."
    exit 1
else
    print_success "Frontend type checks passed!"
fi

print_info "[3/10] Running backend type checks..."
if ! docker compose exec -T backend poetry run mypy src; then
    print_error "Backend type checks failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it backend poetry run mypy src' to try again."
    exit 1
else
    print_success "Backend type checks passed!"
fi

print_info "[4/10] Running frontend linting checks..."
if ! docker compose exec -T frontend yarn eslint --max-warnings 0 "src/**/*.ts" "src/**/*.tsx"; then
    print_error "Frontend linting checks failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it frontend yarn eslint --max-warnings 0 "src/**/*.ts" "src/**/*.tsx"' to try again."
    exit 1
else
    print_success "Frontend linting checks passed!"
fi

print_info "[5/10] Running backend linting checks..."
if ! docker compose exec -T backend poetry run pylint src; then
    print_error "Backend linting checks failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it backend poetry run pylint src' to try again."
    exit 1
else
    print_success "Backend linting tests passed!"
fi

print_info "[6/10] Running frontend formatting checks..."
if ! docker compose exec -T frontend yarn run prettier --check "src/**/*.ts" "src/**/*.tsx"; then
    print_error "Frontend checks failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it frontend yarn run prettier --write "src/**/*.ts" "src/**/*.tsx"' to fix the problem."
    exit 1
else
    print_success "Frontend formatting tests passed!"
fi

print_info "[7/10] Running backend formatting checks..."
if ! docker compose exec -T backend poetry run isort --profile black --check src && \
     docker compose exec -T backend poetry run black --check src; then
    print_error "Backend formatting checks failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it backend poetry run isort --profile black src' and 'docker compose exec -it backend poetry run black src' to fix the problem."
    exit 1
else
    print_success "Backend formatting tests passed!"
fi

print_info "[8/10] Running frontend unit tests..."
if ! docker compose exec -T frontend-test yarn jest --watchAll=false src; then
    print_error "Frontend unit tests failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it frontend-test yarn jest --watchAll=false src' to try again."
    exit 1
else
    print_success "Frontend unit tests passed!"
fi

print_info "[9/10] Running backend unit tests..."
if ! docker compose exec -T backend-test poetry run pytest --verbose --disable-warnings tests; then
    print_error "Backend unit tests failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose exec -it backend-test poetry run pytest --verbose --disable-warnings tests' to try again."
    exit 1
else
    print_success "Backend unit tests passed!"
fi

print_info "[10/10] Running end-to-end tests..."
if ! docker compose run -T cypress yarn cypress run e2e; then
    print_error "End-to-end tests failed. Please fix the issue before pushing."
    print_info "Note: Run 'docker compose run -T cypress yarn cypress run e2e' to try again."
    print_info "Note: Run 'cd frontend && yarn cypress open' to open the Cypress GUI and debug the issue."
    exit 1
else
    print_success "End-to-end tests passed!"
fi

print_success "All tests passed! Pushing changes..."
exit 0
