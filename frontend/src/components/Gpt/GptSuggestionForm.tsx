import { Box } from "@mui/material";
import { SubmitHandler, useForm } from "react-hook-form";
import { QuestionCreate, TextCreateWithQuestions } from "../../api";
import { useSnack } from "../../context/SnackContext";
import { useApproveText, useGenerateText } from "../../hooks/admin";
import GptButton from "../Button/GptButton";
import GptQuestionFeed from "./GptQuestionFeed";
import GptSourceInfo from "./GptSourceInfo";
import GptText from "./GptText";

export interface GptFormData {
  title: string;
  author: string;
  content: string;
  summarised: string;
  questions: {
    content: string;
    options: string[];
    correctOption: number;
    selected: boolean;
  }[];
  source: string;
  image_url: string;
  description: string;
}

/**
 * SOURCE, AUTHOR LINK
 * TEXT TITLE, CONTENT, SUMMARY
 * SELECTED QUESTION COUNT
 * QUESTION LIST [DONE]
 * GENERATE 5 MORE QUESTIONS, APPROVE BUTTONS
 */
const GptSuggestionForm: React.FC<{
  difficulty: string;
  isFiction: boolean;
  setShowResponse: (showResponse: boolean) => void;
}> = ({ difficulty, isFiction, setShowResponse }) => {
  const { data: generatedText } = useGenerateText(difficulty, isFiction);
  console.log(generatedText);
  const useGptForm = useForm<GptFormData>();
  const { handleSubmit } = useGptForm;

  const approveText = useApproveText();
  const { showSnack } = useSnack();

  const onSubmit: SubmitHandler<GptFormData> = async (data: GptFormData) => {
    // Build Question[] data to submit to server
    const questions: QuestionCreate[] = data.questions
      .filter((question) => question.selected)
      .map((question, _) => ({
        id: "", // will be generated by server
        content: question.content,
        options: question.options,
        correct_option: question.correctOption,
      }));
    // Build Text data to submit to server
    const text: TextCreateWithQuestions = {
      title: data.title,
      content: data.content,
      summary: data.summarised,
      source: data.source,
      fiction: generatedText.fiction,
      difficulty: generatedText.difficulty,
      word_count: data.content.length,
      image_url: data.image_url,
      author: generatedText.author,
      description: data.description,
      questions: questions,
    };
    // Send data to server
    approveText.mutate(text, {
      onSuccess: () => {
        showSnack("Text approved successfully");
        setShowResponse(false);
      },
      onError: (error: Error) => {
        showSnack(`Failed to approve text: ${error}`);
      },
    });
  };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        alignContent: "center",
        width: "100%",
      }}
    >
      <form onSubmit={handleSubmit(onSubmit)}>
        <GptSourceInfo
          sourceTitle={generatedText.title}
          author={generatedText.author}
        />
        <GptText useFormReturn={useGptForm} generatedText={generatedText} />
        <GptQuestionFeed
          useFormReturn={useGptForm}
          generatedText={generatedText}
        />
        <Box
          sx={{
            display: "flex",
            justifyContent: "center",
            paddingY: "30px",
            gap: 5,
          }}
        >
          <GptButton submit color={"#379F3B"} label={"approve"} />
        </Box>
      </form>
    </Box>
  );
};

export default GptSuggestionForm;
