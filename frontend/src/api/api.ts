/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessToken
 */
export interface AccessToken {
}
/**
 * 
 * @export
 * @interface AdminStatistics
 */
export interface AdminStatistics {
    /**
     * 
     * @type {number}
     * @memberof AdminStatistics
     */
    'average_score': number;
    /**
     * 
     * @type {number}
     * @memberof AdminStatistics
     */
    'average_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof AdminStatistics
     */
    'min_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof AdminStatistics
     */
    'max_wpm': number;
}
/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'question_id': string;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    'selected_option': number;
}
/**
 * 
 * @export
 * @interface BodyGetUserAvailableTexts
 */
export interface BodyGetUserAvailableTexts {
    /**
     * 
     * @type {BodyGetUserAvailableTextsTextFilter}
     * @memberof BodyGetUserAvailableTexts
     */
    'text_filter'?: BodyGetUserAvailableTextsTextFilter;
    /**
     * 
     * @type {BodyGetUserAvailableTextsTextSort}
     * @memberof BodyGetUserAvailableTexts
     */
    'text_sort'?: BodyGetUserAvailableTextsTextSort;
}
/**
 * 
 * @export
 * @interface BodyGetUserAvailableTextsTextFilter
 */
export interface BodyGetUserAvailableTextsTextFilter {
    /**
     * 
     * @type {GameMode1}
     * @memberof BodyGetUserAvailableTextsTextFilter
     */
    'game_mode'?: GameMode1;
    /**
     * 
     * @type {Difficulty}
     * @memberof BodyGetUserAvailableTextsTextFilter
     */
    'difficulty'?: Difficulty;
}
/**
 * 
 * @export
 * @interface BodyGetUserAvailableTextsTextSort
 */
export interface BodyGetUserAvailableTextsTextSort {
    /**
     * 
     * @type {any}
     * @memberof BodyGetUserAvailableTextsTextSort
     */
    'field': any;
    /**
     * 
     * @type {any}
     * @memberof BodyGetUserAvailableTextsTextSort
     */
    'ascending'?: any;
}
/**
 * 
 * @export
 * @interface BodyLoginUser
 */
export interface BodyLoginUser {
    /**
     * 
     * @type {string}
     * @memberof BodyLoginUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof BodyLoginUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface BodyPostAnswers
 */
export interface BodyPostAnswers {
    /**
     * 
     * @type {Array<Answer>}
     * @memberof BodyPostAnswers
     */
    'answers': Array<Answer>;
    /**
     * 
     * @type {number}
     * @memberof BodyPostAnswers
     */
    'average_wpm': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof BodyPostAnswers
     */
    'interval_wpms': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof BodyPostAnswers
     */
    'game_mode': string;
    /**
     * 
     * @type {string}
     * @memberof BodyPostAnswers
     */
    'game_submode': string;
    /**
     * 
     * @type {boolean}
     * @memberof BodyPostAnswers
     */
    'summary': boolean;
}
/**
 * 
 * @export
 * @interface BodyRegisterUser
 */
export interface BodyRegisterUser {
    /**
     * 
     * @type {string}
     * @memberof BodyRegisterUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof BodyRegisterUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof BodyRegisterUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Difficulty
 */
export interface Difficulty {
}
/**
 * 
 * @export
 * @interface GameMode
 */
export interface GameMode {
}
/**
 * 
 * @export
 * @interface GameMode1
 */
export interface GameMode1 {
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface History
 */
export interface History {
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'text_id': string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'game_mode': string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'game_submode': string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'difficulty': string;
    /**
     * 
     * @type {boolean}
     * @memberof History
     */
    'summary': boolean;
    /**
     * 
     * @type {number}
     * @memberof History
     */
    'average_wpm': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof History
     */
    'interval_wpms': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof History
     */
    'score': number;
    /**
     * 
     * @type {Array<Result>}
     * @memberof History
     */
    'results': Array<Result>;
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Question
     */
    'options': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'correct_option': number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface QuestionCreate
 */
export interface QuestionCreate {
    /**
     * 
     * @type {string}
     * @memberof QuestionCreate
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionCreate
     */
    'options': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof QuestionCreate
     */
    'correct_option': number;
}
/**
 * 
 * @export
 * @interface QuestionMasked
 */
export interface QuestionMasked {
    /**
     * 
     * @type {string}
     * @memberof QuestionMasked
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionMasked
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionMasked
     */
    'options': Array<string>;
}
/**
 * 
 * @export
 * @interface QuestionWithStatistics
 */
export interface QuestionWithStatistics {
    /**
     * 
     * @type {string}
     * @memberof QuestionWithStatistics
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionWithStatistics
     */
    'options': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof QuestionWithStatistics
     */
    'correct_option': number;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithStatistics
     */
    'id': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof QuestionWithStatistics
     */
    'percentages': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof QuestionWithStatistics
     */
    'accuracy': number;
}
/**
 * 
 * @export
 * @interface RefreshToken
 */
export interface RefreshToken {
}
/**
 * 
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    'question_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof Result
     */
    'correct': boolean;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'correct_option': number;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    'selected_option': number;
}
/**
 * 
 * @export
 * @interface Summary
 */
export interface Summary {
}
/**
 * 
 * @export
 * @interface Text
 */
export interface Text {
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    'content': string;
    /**
     * 
     * @type {Summary}
     * @memberof Text
     */
    'summary': Summary;
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    'source': string;
    /**
     * 
     * @type {boolean}
     * @memberof Text
     */
    'fiction': boolean;
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    'difficulty': string;
    /**
     * 
     * @type {number}
     * @memberof Text
     */
    'word_count': number;
    /**
     * 
     * @type {string}
     * @memberof Text
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TextCreateWithQuestions
 */
export interface TextCreateWithQuestions {
    /**
     * 
     * @type {string}
     * @memberof TextCreateWithQuestions
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TextCreateWithQuestions
     */
    'content': string;
    /**
     * 
     * @type {Summary}
     * @memberof TextCreateWithQuestions
     */
    'summary': Summary;
    /**
     * 
     * @type {string}
     * @memberof TextCreateWithQuestions
     */
    'source': string;
    /**
     * 
     * @type {boolean}
     * @memberof TextCreateWithQuestions
     */
    'fiction': boolean;
    /**
     * 
     * @type {string}
     * @memberof TextCreateWithQuestions
     */
    'difficulty': string;
    /**
     * 
     * @type {number}
     * @memberof TextCreateWithQuestions
     */
    'word_count': number;
    /**
     * 
     * @type {Array<QuestionCreate>}
     * @memberof TextCreateWithQuestions
     */
    'questions': Array<QuestionCreate>;
}
/**
 * 
 * @export
 * @interface TextFilter
 */
export interface TextFilter {
    /**
     * 
     * @type {GameMode1}
     * @memberof TextFilter
     */
    'game_mode'?: GameMode1;
    /**
     * 
     * @type {Difficulty}
     * @memberof TextFilter
     */
    'difficulty'?: Difficulty;
}
/**
 * 
 * @export
 * @interface TextSort
 */
export interface TextSort {
    /**
     * 
     * @type {string}
     * @memberof TextSort
     */
    'field': string;
    /**
     * 
     * @type {boolean}
     * @memberof TextSort
     */
    'ascending'?: boolean;
}
/**
 * 
 * @export
 * @interface TextWithQuestions
 */
export interface TextWithQuestions {
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestions
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestions
     */
    'content': string;
    /**
     * 
     * @type {Summary}
     * @memberof TextWithQuestions
     */
    'summary': Summary;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestions
     */
    'source': string;
    /**
     * 
     * @type {boolean}
     * @memberof TextWithQuestions
     */
    'fiction': boolean;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestions
     */
    'difficulty': string;
    /**
     * 
     * @type {number}
     * @memberof TextWithQuestions
     */
    'word_count': number;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestions
     */
    'id': string;
    /**
     * 
     * @type {Array<Question>}
     * @memberof TextWithQuestions
     */
    'questions': Array<Question>;
}
/**
 * 
 * @export
 * @interface TextWithQuestionsAndStatistics
 */
export interface TextWithQuestionsAndStatistics {
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestionsAndStatistics
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestionsAndStatistics
     */
    'content': string;
    /**
     * 
     * @type {Summary}
     * @memberof TextWithQuestionsAndStatistics
     */
    'summary': Summary;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestionsAndStatistics
     */
    'source': string;
    /**
     * 
     * @type {boolean}
     * @memberof TextWithQuestionsAndStatistics
     */
    'fiction': boolean;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestionsAndStatistics
     */
    'difficulty': string;
    /**
     * 
     * @type {number}
     * @memberof TextWithQuestionsAndStatistics
     */
    'word_count': number;
    /**
     * 
     * @type {string}
     * @memberof TextWithQuestionsAndStatistics
     */
    'id': string;
    /**
     * 
     * @type {Array<Question>}
     * @memberof TextWithQuestionsAndStatistics
     */
    'questions': Array<Question>;
    /**
     * 
     * @type {number}
     * @memberof TextWithQuestionsAndStatistics
     */
    'min_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof TextWithQuestionsAndStatistics
     */
    'max_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof TextWithQuestionsAndStatistics
     */
    'average_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof TextWithQuestionsAndStatistics
     */
    'average_score': number;
}
/**
 * 
 * @export
 * @interface TextWithStatistics
 */
export interface TextWithStatistics {
    /**
     * 
     * @type {string}
     * @memberof TextWithStatistics
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TextWithStatistics
     */
    'content': string;
    /**
     * 
     * @type {Summary}
     * @memberof TextWithStatistics
     */
    'summary': Summary;
    /**
     * 
     * @type {string}
     * @memberof TextWithStatistics
     */
    'source': string;
    /**
     * 
     * @type {boolean}
     * @memberof TextWithStatistics
     */
    'fiction': boolean;
    /**
     * 
     * @type {string}
     * @memberof TextWithStatistics
     */
    'difficulty': string;
    /**
     * 
     * @type {number}
     * @memberof TextWithStatistics
     */
    'word_count': number;
    /**
     * 
     * @type {string}
     * @memberof TextWithStatistics
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof TextWithStatistics
     */
    'min_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof TextWithStatistics
     */
    'max_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof TextWithStatistics
     */
    'average_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof TextWithStatistics
     */
    'average_score': number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface UserAvailableTexts
 */
export interface UserAvailableTexts {
    /**
     * 
     * @type {Array<Text>}
     * @memberof UserAvailableTexts
     */
    'texts': Array<Text>;
    /**
     * 
     * @type {number}
     * @memberof UserAvailableTexts
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof UserAvailableTexts
     */
    'page_size': number;
    /**
     * 
     * @type {number}
     * @memberof UserAvailableTexts
     */
    'total_texts': number;
}
/**
 * 
 * @export
 * @interface UserStatistics
 */
export interface UserStatistics {
    /**
     * 
     * @type {string}
     * @memberof UserStatistics
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatistics
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatistics
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof UserStatistics
     */
    'min_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof UserStatistics
     */
    'max_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof UserStatistics
     */
    'average_wpm': number;
    /**
     * 
     * @type {number}
     * @memberof UserStatistics
     */
    'average_score': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a text to the database.
         * @summary Approve Text
         * @param {TextCreateWithQuestions} textCreateWithQuestions 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveText: async (textCreateWithQuestions: TextCreateWithQuestions, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textCreateWithQuestions' is not null or undefined
            assertParamExists('approveText', 'textCreateWithQuestions', textCreateWithQuestions)
            const localVarPath = `/admin/approve-text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(textCreateWithQuestions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a question of a text by the given id.
         * @summary Delete Question
         * @param {string} textId 
         * @param {string} questionId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion: async (textId: string, questionId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('deleteQuestion', 'textId', textId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('deleteQuestion', 'questionId', questionId)
            const localVarPath = `/admin/texts/{text_id}/questions/{question_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)))
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a text by the given id.
         * @summary Delete Text
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteText: async (textId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('deleteText', 'textId', textId)
            const localVarPath = `/admin/texts/{text_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Text
         * @param {string} difficulty 
         * @param {boolean} fiction 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateText: async (difficulty: string, fiction: boolean, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'difficulty' is not null or undefined
            assertParamExists('generateText', 'difficulty', difficulty)
            // verify required parameter 'fiction' is not null or undefined
            assertParamExists('generateText', 'fiction', fiction)
            const localVarPath = `/admin/generate-text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (difficulty !== undefined) {
                localVarQueryParameter['difficulty'] = difficulty;
            }

            if (fiction !== undefined) {
                localVarQueryParameter['fiction'] = fiction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the statistics of the admin.
         * @summary Get Admin Statistics
         * @param {string} gameMode 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminStatistics: async (gameMode: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameMode' is not null or undefined
            assertParamExists('getAdminStatistics', 'gameMode', gameMode)
            const localVarPath = `/admin/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameMode !== undefined) {
                localVarQueryParameter['game_mode'] = gameMode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a question of a text by the given id.
         * @summary Get Question
         * @param {string} textId 
         * @param {string} questionId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestion: async (textId: string, questionId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('getQuestion', 'textId', textId)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('getQuestion', 'questionId', questionId)
            const localVarPath = `/admin/texts/{text_id}/questions/{question_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)))
                .replace(`{${"question_id"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the questions of a text by the given id.
         * @summary Get Questions
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestions: async (textId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('getQuestions', 'textId', textId)
            const localVarPath = `/admin/texts/{text_id}/questions`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a text by the given id.
         * @summary Get Text
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getText: async (textId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('getText', 'textId', textId)
            const localVarPath = `/admin/texts/{text_id}`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all texts.
         * @summary Get Texts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTexts: async (page?: number, pageSize?: number, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/texts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a text to the database.
         * @summary Approve Text
         * @param {TextCreateWithQuestions} textCreateWithQuestions 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveText(textCreateWithQuestions: TextCreateWithQuestions, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextWithQuestions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveText(textCreateWithQuestions, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.approveText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a question of a text by the given id.
         * @summary Delete Question
         * @param {string} textId 
         * @param {string} questionId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestion(textId: string, questionId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestion(textId, questionId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.deleteQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a text by the given id.
         * @summary Delete Text
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteText(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Text>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteText(textId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.deleteText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Text
         * @param {string} difficulty 
         * @param {boolean} fiction 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateText(difficulty: string, fiction: boolean, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextCreateWithQuestions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateText(difficulty, fiction, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.generateText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the statistics of the admin.
         * @summary Get Admin Statistics
         * @param {string} gameMode 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminStatistics(gameMode: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminStatistics(gameMode, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getAdminStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a question of a text by the given id.
         * @summary Get Question
         * @param {string} textId 
         * @param {string} questionId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestion(textId: string, questionId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionWithStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestion(textId, questionId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the questions of a text by the given id.
         * @summary Get Questions
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestions(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionWithStatistics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestions(textId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a text by the given id.
         * @summary Get Text
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getText(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TextWithQuestionsAndStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getText(textId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets all texts.
         * @summary Get Texts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTexts(page?: number, pageSize?: number, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TextWithStatistics>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTexts(page, pageSize, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getTexts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Adds a text to the database.
         * @summary Approve Text
         * @param {TextCreateWithQuestions} textCreateWithQuestions 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveText(textCreateWithQuestions: TextCreateWithQuestions, accessToken?: AccessToken, options?: any): AxiosPromise<TextWithQuestions> {
            return localVarFp.approveText(textCreateWithQuestions, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a question of a text by the given id.
         * @summary Delete Question
         * @param {string} textId 
         * @param {string} questionId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion(textId: string, questionId: string, accessToken?: AccessToken, options?: any): AxiosPromise<Question> {
            return localVarFp.deleteQuestion(textId, questionId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a text by the given id.
         * @summary Delete Text
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteText(textId: string, accessToken?: AccessToken, options?: any): AxiosPromise<Text> {
            return localVarFp.deleteText(textId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Text
         * @param {string} difficulty 
         * @param {boolean} fiction 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateText(difficulty: string, fiction: boolean, accessToken?: AccessToken, options?: any): AxiosPromise<TextCreateWithQuestions> {
            return localVarFp.generateText(difficulty, fiction, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the statistics of the admin.
         * @summary Get Admin Statistics
         * @param {string} gameMode 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminStatistics(gameMode: string, accessToken?: AccessToken, options?: any): AxiosPromise<AdminStatistics> {
            return localVarFp.getAdminStatistics(gameMode, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a question of a text by the given id.
         * @summary Get Question
         * @param {string} textId 
         * @param {string} questionId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestion(textId: string, questionId: string, accessToken?: AccessToken, options?: any): AxiosPromise<QuestionWithStatistics> {
            return localVarFp.getQuestion(textId, questionId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the questions of a text by the given id.
         * @summary Get Questions
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestions(textId: string, accessToken?: AccessToken, options?: any): AxiosPromise<Array<QuestionWithStatistics>> {
            return localVarFp.getQuestions(textId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a text by the given id.
         * @summary Get Text
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getText(textId: string, accessToken?: AccessToken, options?: any): AxiosPromise<TextWithQuestionsAndStatistics> {
            return localVarFp.getText(textId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all texts.
         * @summary Get Texts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTexts(page?: number, pageSize?: number, accessToken?: AccessToken, options?: any): AxiosPromise<Array<TextWithStatistics>> {
            return localVarFp.getTexts(page, pageSize, accessToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * Adds a text to the database.
     * @summary Approve Text
     * @param {TextCreateWithQuestions} textCreateWithQuestions 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public approveText(textCreateWithQuestions: TextCreateWithQuestions, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).approveText(textCreateWithQuestions, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a question of a text by the given id.
     * @summary Delete Question
     * @param {string} textId 
     * @param {string} questionId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public deleteQuestion(textId: string, questionId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteQuestion(textId, questionId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a text by the given id.
     * @summary Delete Text
     * @param {string} textId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public deleteText(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteText(textId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Text
     * @param {string} difficulty 
     * @param {boolean} fiction 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public generateText(difficulty: string, fiction: boolean, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).generateText(difficulty, fiction, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the statistics of the admin.
     * @summary Get Admin Statistics
     * @param {string} gameMode 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getAdminStatistics(gameMode: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAdminStatistics(gameMode, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a question of a text by the given id.
     * @summary Get Question
     * @param {string} textId 
     * @param {string} questionId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getQuestion(textId: string, questionId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getQuestion(textId, questionId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the questions of a text by the given id.
     * @summary Get Questions
     * @param {string} textId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getQuestions(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getQuestions(textId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a text by the given id.
     * @summary Get Text
     * @param {string} textId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getText(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getText(textId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all texts.
     * @summary Get Texts
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getTexts(page?: number, pageSize?: number, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getTexts(page, pageSize, accessToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * User passes their refresh token to get a new access token. TODO: Invalidate refresh token on use.
         * @summary Get Token
         * @param {RefreshToken} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken: async (refreshToken?: RefreshToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * User passes their refresh token to get a new access token. TODO: Invalidate refresh token on use.
         * @summary Get Token
         * @param {RefreshToken} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToken(refreshToken?: RefreshToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToken(refreshToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * User passes their refresh token to get a new access token. TODO: Invalidate refresh token on use.
         * @summary Get Token
         * @param {RefreshToken} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken(refreshToken?: RefreshToken, options?: any): AxiosPromise<any> {
            return localVarFp.getToken(refreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * User passes their refresh token to get a new access token. TODO: Invalidate refresh token on use.
     * @summary Get Token
     * @param {RefreshToken} [refreshToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getToken(refreshToken?: RefreshToken, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getToken(refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Seed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seed: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/testing/db/seed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Seed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seed(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seed(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.seed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Seed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seed(options?: any): AxiosPromise<any> {
            return localVarFp.seed(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Seed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public seed(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).seed(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets next 10 questions that the user has not attempted before. TODO: The current implementation returns 10 random questions for the given text, regardless of which questions the user has seen.
         * @summary Get Next Questions
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextQuestions: async (textId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('getNextQuestions', 'textId', textId)
            const localVarPath = `/game/texts/{text_id}/questions/next`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the next text that the user has not attempted before. TODO: The current implementation returns a random text, regardless of which texts the user has seen.
         * @summary Get Next Text
         * @param {boolean} isSummary 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextText: async (isSummary: boolean, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isSummary' is not null or undefined
            assertParamExists('getNextText', 'isSummary', isSummary)
            const localVarPath = `/game/texts/next`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isSummary !== undefined) {
                localVarQueryParameter['is_summary'] = isSummary;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts the question answers and other statistics. Returns the results to the answers.
         * @summary Post Answers
         * @param {string} textId 
         * @param {BodyPostAnswers} bodyPostAnswers 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnswers: async (textId: string, bodyPostAnswers: BodyPostAnswers, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'textId' is not null or undefined
            assertParamExists('postAnswers', 'textId', textId)
            // verify required parameter 'bodyPostAnswers' is not null or undefined
            assertParamExists('postAnswers', 'bodyPostAnswers', bodyPostAnswers)
            const localVarPath = `/game/texts/{text_id}/answers`
                .replace(`{${"text_id"}}`, encodeURIComponent(String(textId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyPostAnswers, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets next 10 questions that the user has not attempted before. TODO: The current implementation returns 10 random questions for the given text, regardless of which questions the user has seen.
         * @summary Get Next Questions
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNextQuestions(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionMasked>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNextQuestions(textId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.getNextQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the next text that the user has not attempted before. TODO: The current implementation returns a random text, regardless of which texts the user has seen.
         * @summary Get Next Text
         * @param {boolean} isSummary 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNextText(isSummary: boolean, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Text>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNextText(isSummary, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.getNextText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Accepts the question answers and other statistics. Returns the results to the answers.
         * @summary Post Answers
         * @param {string} textId 
         * @param {BodyPostAnswers} bodyPostAnswers 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAnswers(textId: string, bodyPostAnswers: BodyPostAnswers, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Result>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAnswers(textId, bodyPostAnswers, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.postAnswers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * Gets next 10 questions that the user has not attempted before. TODO: The current implementation returns 10 random questions for the given text, regardless of which questions the user has seen.
         * @summary Get Next Questions
         * @param {string} textId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextQuestions(textId: string, accessToken?: AccessToken, options?: any): AxiosPromise<Array<QuestionMasked>> {
            return localVarFp.getNextQuestions(textId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the next text that the user has not attempted before. TODO: The current implementation returns a random text, regardless of which texts the user has seen.
         * @summary Get Next Text
         * @param {boolean} isSummary 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextText(isSummary: boolean, accessToken?: AccessToken, options?: any): AxiosPromise<Text> {
            return localVarFp.getNextText(isSummary, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts the question answers and other statistics. Returns the results to the answers.
         * @summary Post Answers
         * @param {string} textId 
         * @param {BodyPostAnswers} bodyPostAnswers 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnswers(textId: string, bodyPostAnswers: BodyPostAnswers, accessToken?: AccessToken, options?: any): AxiosPromise<Array<Result>> {
            return localVarFp.postAnswers(textId, bodyPostAnswers, accessToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * Gets next 10 questions that the user has not attempted before. TODO: The current implementation returns 10 random questions for the given text, regardless of which questions the user has seen.
     * @summary Get Next Questions
     * @param {string} textId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public getNextQuestions(textId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).getNextQuestions(textId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the next text that the user has not attempted before. TODO: The current implementation returns a random text, regardless of which texts the user has seen.
     * @summary Get Next Text
     * @param {boolean} isSummary 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public getNextText(isSummary: boolean, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).getNextText(isSummary, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts the question answers and other statistics. Returns the results to the answers.
     * @summary Post Answers
     * @param {string} textId 
     * @param {BodyPostAnswers} bodyPostAnswers 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public postAnswers(textId: string, bodyPostAnswers: BodyPostAnswers, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).postAnswers(textId, bodyPostAnswers, accessToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the current user\'s information.
         * @summary Get Current User
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the history of games played by the user.
         * @summary Get Histories
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistories: async (accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/results`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the history of games played by the user.
         * @summary Get History
         * @param {string} historyId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (historyId: string, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyId' is not null or undefined
            assertParamExists('getHistory', 'historyId', historyId)
            const localVarPath = `/users/current/results/{history_id}`
                .replace(`{${"history_id"}}`, encodeURIComponent(String(historyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the texts not read by the user. Returns the texts paginated and sorted/filtered by the given parameters.
         * @summary Get User Available Texts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {AccessToken} [accessToken] 
         * @param {BodyGetUserAvailableTexts} [bodyGetUserAvailableTexts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvailableTexts: async (page?: number, pageSize?: number, accessToken?: AccessToken, bodyGetUserAvailableTexts?: BodyGetUserAvailableTexts, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/available_texts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyGetUserAvailableTexts, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the statistics based on the user\'s game history.
         * @summary Get User Statistics
         * @param {GameMode} [gameMode] 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatistics: async (gameMode?: GameMode, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/current/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameMode !== undefined) {
                for (const [key, value] of Object.entries(gameMode)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs in a user. Returns access token and refresh token.
         * @summary Login User
         * @param {BodyLoginUser} bodyLoginUser 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (bodyLoginUser: BodyLoginUser, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyLoginUser' is not null or undefined
            assertParamExists('loginUser', 'bodyLoginUser', bodyLoginUser)
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyLoginUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logs out a user. Invalidates the refresh token. TODO: Blacklist the refresh token.
         * @summary Logout User
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser: async (accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registers a new user.
         * @summary Register User
         * @param {BodyRegisterUser} bodyRegisterUser 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (bodyRegisterUser: BodyRegisterUser, accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyRegisterUser' is not null or undefined
            assertParamExists('registerUser', 'bodyRegisterUser', bodyRegisterUser)
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyRegisterUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets the current user\'s information.
         * @summary Get Current User
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the history of games played by the user.
         * @summary Get Histories
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistories(accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<History>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistories(accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getHistories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the history of games played by the user.
         * @summary Get History
         * @param {string} historyId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(historyId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<History>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(historyId, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the texts not read by the user. Returns the texts paginated and sorted/filtered by the given parameters.
         * @summary Get User Available Texts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {AccessToken} [accessToken] 
         * @param {BodyGetUserAvailableTexts} [bodyGetUserAvailableTexts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAvailableTexts(page?: number, pageSize?: number, accessToken?: AccessToken, bodyGetUserAvailableTexts?: BodyGetUserAvailableTexts, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAvailableTexts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAvailableTexts(page, pageSize, accessToken, bodyGetUserAvailableTexts, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserAvailableTexts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the statistics based on the user\'s game history.
         * @summary Get User Statistics
         * @param {GameMode} [gameMode] 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStatistics(gameMode?: GameMode, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStatistics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStatistics(gameMode, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logs in a user. Returns access token and refresh token.
         * @summary Login User
         * @param {BodyLoginUser} bodyLoginUser 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(bodyLoginUser: BodyLoginUser, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(bodyLoginUser, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.loginUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logs out a user. Invalidates the refresh token. TODO: Blacklist the refresh token.
         * @summary Logout User
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutUser(accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutUser(accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.logoutUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registers a new user.
         * @summary Register User
         * @param {BodyRegisterUser} bodyRegisterUser 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(bodyRegisterUser: BodyRegisterUser, accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(bodyRegisterUser, accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Gets the current user\'s information.
         * @summary Get Current User
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(accessToken?: AccessToken, options?: any): AxiosPromise<User> {
            return localVarFp.getCurrentUser(accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the history of games played by the user.
         * @summary Get Histories
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistories(accessToken?: AccessToken, options?: any): AxiosPromise<Array<History>> {
            return localVarFp.getHistories(accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the history of games played by the user.
         * @summary Get History
         * @param {string} historyId 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(historyId: string, accessToken?: AccessToken, options?: any): AxiosPromise<History> {
            return localVarFp.getHistory(historyId, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the texts not read by the user. Returns the texts paginated and sorted/filtered by the given parameters.
         * @summary Get User Available Texts
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {AccessToken} [accessToken] 
         * @param {BodyGetUserAvailableTexts} [bodyGetUserAvailableTexts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvailableTexts(page?: number, pageSize?: number, accessToken?: AccessToken, bodyGetUserAvailableTexts?: BodyGetUserAvailableTexts, options?: any): AxiosPromise<UserAvailableTexts> {
            return localVarFp.getUserAvailableTexts(page, pageSize, accessToken, bodyGetUserAvailableTexts, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the statistics based on the user\'s game history.
         * @summary Get User Statistics
         * @param {GameMode} [gameMode] 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatistics(gameMode?: GameMode, accessToken?: AccessToken, options?: any): AxiosPromise<UserStatistics> {
            return localVarFp.getUserStatistics(gameMode, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Logs in a user. Returns access token and refresh token.
         * @summary Login User
         * @param {BodyLoginUser} bodyLoginUser 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(bodyLoginUser: BodyLoginUser, accessToken?: AccessToken, options?: any): AxiosPromise<any> {
            return localVarFp.loginUser(bodyLoginUser, accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Logs out a user. Invalidates the refresh token. TODO: Blacklist the refresh token.
         * @summary Logout User
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(accessToken?: AccessToken, options?: any): AxiosPromise<any> {
            return localVarFp.logoutUser(accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Registers a new user.
         * @summary Register User
         * @param {BodyRegisterUser} bodyRegisterUser 
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(bodyRegisterUser: BodyRegisterUser, accessToken?: AccessToken, options?: any): AxiosPromise<any> {
            return localVarFp.registerUser(bodyRegisterUser, accessToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Gets the current user\'s information.
     * @summary Get Current User
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUser(accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getCurrentUser(accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the history of games played by the user.
     * @summary Get Histories
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getHistories(accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getHistories(accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the history of games played by the user.
     * @summary Get History
     * @param {string} historyId 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getHistory(historyId: string, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getHistory(historyId, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the texts not read by the user. Returns the texts paginated and sorted/filtered by the given parameters.
     * @summary Get User Available Texts
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {AccessToken} [accessToken] 
     * @param {BodyGetUserAvailableTexts} [bodyGetUserAvailableTexts] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserAvailableTexts(page?: number, pageSize?: number, accessToken?: AccessToken, bodyGetUserAvailableTexts?: BodyGetUserAvailableTexts, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserAvailableTexts(page, pageSize, accessToken, bodyGetUserAvailableTexts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the statistics based on the user\'s game history.
     * @summary Get User Statistics
     * @param {GameMode} [gameMode] 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserStatistics(gameMode?: GameMode, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserStatistics(gameMode, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logs in a user. Returns access token and refresh token.
     * @summary Login User
     * @param {BodyLoginUser} bodyLoginUser 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginUser(bodyLoginUser: BodyLoginUser, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).loginUser(bodyLoginUser, accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logs out a user. Invalidates the refresh token. TODO: Blacklist the refresh token.
     * @summary Logout User
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logoutUser(accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).logoutUser(accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registers a new user.
     * @summary Register User
     * @param {BodyRegisterUser} bodyRegisterUser 
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public registerUser(bodyRegisterUser: BodyRegisterUser, accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).registerUser(bodyRegisterUser, accessToken, options).then((request) => request(this.axios, this.basePath));
    }
}



