stages:
  - init
  - check
  - test
  - deploy

variables:
  # Disable shallow clone which is not supported by Dokku.
  # https://github.com/dokku/dokku/issues/2514#issuecomment-616775470
  GIT_DEPTH: 0

  # Configure GitLab runner with Docker in Docker with TLS enabled.
  # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-in-docker-with-tls-enabled-in-the-docker-executor
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

  STAGING_URL: ssh://dokku@cloud-vm-42-173.doc.ic.ac.uk:22
  PROD_URL: ssh://dokku@cloud-vm-42-228.doc.ic.ac.uk:22

default:
  tags: [private]

.check:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker compose up -d

.deploy:
  tags: [private]
  image: dokku/ci-docker-image
  stage: deploy
  script:
    - dokku-deploy
  after_script:
    - dokku-unlock

check_frontend:
  extends: .check
  stage: check
  script:
    - docker compose exec -T frontend yarn tsc --noEmit
    - docker compose exec -T frontend yarn eslint --max-warnings 0 "src/**/*.ts" "src/**/*.tsx"
    - docker compose exec -T frontend yarn run prettier --check "src/**/*.ts" "src/**/*.tsx"

check_backend:
  extends: .check
  stage: check
  script:
    - docker compose exec -T backend poetry run mypy src
    - docker compose exec -T backend poetry run pylint src
    - docker compose exec -T backend poetry run isort --profile black --check src
    - docker compose exec -T backend poetry run black --check src

test_frontend:
  extends: .check
  stage: test
  script:
    - docker compose exec -T frontend echo "Testing"
    # - docker compose exec -T frontend yarn test

test_backend:
  extends: .check
  stage: test
  script:
    - docker compose run backend poetry run pytest --verbose --disable-warnings tests

deploy_staging_frontend:
  extends: .deploy
  # Need to make sure backend app is deployed
  # otherwise network alias speed-reader-backend.web cannot be resolved.
  needs: [deploy_staging_backend]
  only: [master]
  variables:
    BRANCH: staging
    GIT_REMOTE_URL: $STAGING_URL/speed-reader-frontend
    GIT_PUSH_FLAGS: -f

deploy_staging_backend:
  extends: .deploy
  only: [master]
  variables:
    BRANCH: staging
    GIT_REMOTE_URL: $STAGING_URL/speed-reader-backend
    GIT_PUSH_FLAGS: -f

deploy_prod_frontend:
  extends: .deploy
  needs: [deploy_prod_backend]
  only: [tags]
  except: [branches]
  variables:
    BRANCH: master
    GIT_REMOTE_URL: $PROD_URL/speed-reader-frontend
    GIT_PUSH_FLAGS: -f

deploy_prod_backend:
  extends: .deploy
  only: [tags]
  except: [branches]
  variables:
    BRANCH: master
    GIT_REMOTE_URL: $PROD_URL/speed-reader-backend
    GIT_PUSH_FLAGS: -f
